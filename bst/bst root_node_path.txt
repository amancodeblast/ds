#include <iostream>
using namespace std;
#include <queue>
#include<climits>
//include<bits/stdc++.h>
//using namespace std; 

template <typename T>
class BinaryTree{
    public:
    T data;
    BinaryTree *left;
    BinaryTree *right;
    BinaryTree(T data){
        this->data=data;
        left=NULL;
        right=NULL;
    }
    ~BinaryTree(){
        delete left;
        delete right;
    }
};
//take input
//take input level wise

void printTree(BinaryTree<int>* root){
    if(root==NULL){
        return;
    }
    cout<<root->data<<":";
    if(root->left!=NULL){
        cout<<"L-"<<root->left->data<<",";
    }
    
    if(root->right!=NULL){
        cout<<"R-"<<root->right->data<<",";
    }
    cout<<endl;
    printTree(root->left);
    printTree(root->right);
        
}

//take input level wise
BinaryTree<int>* level_input(){
    cout<<"enter the node please"<<endl;
    int n;
    cin>>n;
    if(n==-1){
        return NULL;
    }
    BinaryTree<int> *root=new BinaryTree<int>(n);
    queue <BinaryTree<int> * > p;
    p.push(root);
    while(p.empty()!=1){
        BinaryTree<int>* current=p.front();
        p.pop();
        int l,r;
        
        cout<<"enter the left child of "<<current->data<<"'s"<<endl;
        
        cin>>l;
        if(l!=-1){
        BinaryTree<int> *leftchild=new BinaryTree<int>(l);
        current->left=leftchild;
        p.push(leftchild);
        }
        
        cout<<"enter the right child of "<<current->data<<"'s"<<endl;
        cin>>r;
        if(r!=-1){
        BinaryTree<int> *rightchild= new BinaryTree<int>(r);
        current->right=rightchild;
        p.push(rightchild);
        }
        
    }
    return root;
}


bool isbst(BinaryTree<int>* root,int max, int min){
    if(root==NULL){
        return true;
    }
    if(root->data>max||root->data<min){
        return false;
    }
    bool leftok=isbst(root->left,root->data,min);
    bool rightok=isbst(root->right,max,root->data);
    return leftok&&rightok;
}

//getting a bniary search tree out of a sorted array
BinaryTree<int> * arrToBST(int *arr,int si,int ei){
    if(si<ei){
        cout<<"recursive case shahi nahi lagra muzhe toh check kar jara"<<endl;
        return NULL;
    
        
    }
    int m=((si+ei)/2);
    cout<<"bencho chutiyaap hai ye"<<endl;
    BinaryTree<int> *root=new BinaryTree<int>(arr[m]);
   
    root->left=(arrToBST(arr,si,m-1));
    root->right=(arrToBST(arr,m+1,ei));
    return root;
}
class ll{
  public:
  int data;
  ll *next;
  ll(int d){
      data=d;
      next=NULL;
      
      
  }
};
//a funciton that takes in the vavlue of root and the searching number and return the path if possible or a node haing a value -1
ll * bstpath(BinaryTree <int>* root,int s){
    
    if(root==NULL){
        ll * nn=new ll(-1);
        return nn;
    }
    ll *nn=new ll(root->data);
    if(root->data==s){
        
        return nn;
    }
    ll *lft;
    ll *rgt;
    
    lft=bstpath(root->left,s);
    rgt=bstpath(root->right,s);
    if(lft->data!=-1||rgt->data!=-1){
        nn->next=(rgt->data!=-1)?rgt:lft;
        return nn;
    }
    nn->data=-1;
    return nn;
    
    
}
ll * bstToLL(BinaryTree<int> *root){
    if(root==NULL){
        return NULL;
    }
    ll *nd=new ll(root->data);
    nd->next=bstToLL(root->right);
    ll *head=bstToLL(root->left);
    ll *temp=head;
    if(temp==NULL){
        head=nd;
        return head;
    }
    while(temp->next!=NULL){
        temp=temp->next;
    }
        temp->next=nd;
        return head;
    }
void print(ll * head){
    ll * temp=head;
    while(temp!=NULL){
        cout<<temp->data<<""<<endl;
        temp=temp->next;
        
    }
}

int main(void){
    // Your code here!
    //cout<<"this is the payback"<<INT_MIN<<endl;
    //BinaryTree <int>* root=level_input();
    //cout<< "this satatement is false "<<isbst(root,INT_MAX,INT_MIN)<<endl;
    //int ar[]={1,3,5,6,7,8,9};
    //BinaryTree <int>* root=arrToBST(ar,0,6);
    BinaryTree <int>* root=level_input();
    cout<<"this is after the loop"<<endl;
    ll * head=bstToLL(root);
    cout<<"this is after the head"<<endl;
    print(head);
    cout<<"the path of the tree is"<<endl;
    ll* path=bstpath(root,2);
    print(path);
    cout<<"the tree goes like this"<<endl;
    cout<<"this is the payback"<<root->data<<endl;
    //printTree(root);
}
//fake comment