//finding the middle of a linked list 
int getMiddle(Node *head)
{
   // Your code here
   Node *slow=head;
   Node *fast=head;
   while(fast->next!=NULL){
       if(fast->next->next!=NULL){
           fast=fast->next->next;
           slow=slow->next;
       }
       else{
           fast=fast->next;
		   slow=slow->next;//for finding the even 2nd middle no.
   }
   }
   return slow->data;
}
//reversing the linked list using recursion 
Node* reverseList(Node *head)
{
  // Your code here
  if(head->next==NULL||head==NULL){
      return head;
  }
  Node *head1=reverseList(head->next);
  head->next->next=head;
  
  head->next=NULL;
  return head1;
}



//reversing the linked list using while loop (not compiled)

Node* reverseList(Node *head)
{
  // Your code here

  Node *prev=NULL;
  Node *cu=head;
  Node *n=NULL;
  while(cu!=NULL){
      n=cu->next;
      cu->next=prev;
      prev=cu;
      cu=n;
      
  }
  return prev;
}


//Detect a loop in a linked list 
//error removed by a small difference that doesnt even matter
int detectloop(Node *head) {
    
    // your code here
    int r=0;
    
    Node *fast=head;
    Node *slow=head;
    while(slow&&fast&&fast->next){
        slow=slow->next;
        fast=fast->next->next;
        if(fast==slow){
            r=1;
        }
    }
    return r;
}



// reverse a part of linked list (seg fault)

struct node *reverse (struct node *head, int k)
{ 
    // Complete this method
   
    struct node * prev=NULL;
    struct node *cu=head;
    struct node *n=NULL;
    int i=0;
    while(i<k&&cu!=NULL){
        n=cu->next;
        cu->next=prev;
        prev=cu;
        cu=n;
        i++;
    }
    if(cu!=NULL){
    head->next=reverse(n,k);
    
    }
    return prev;
}


//rotate a linked list by k places
Node* rotate(Node* head, int k) {
    // Your code here
    Node *temp=head;
    int i=1;
    while(i<k&&head!=NULL){
    head=head->next;
    i++;    
    }
    Node *head2=head;
    while(head2!=NULL &&head2->next!=NULL){
        head2=head2->next;
    }
    if(head2!=NULL){
    head2->next=temp;
    Node *r=head->next;
    head->next=NULL;   
    return r;
    }
    return NULL;
    
}

//remove loop from a linked list
void removeTheLoop(Node *head)
{
     //Your code here
     unordered_set<Node*>s;
     s.insert(head);
     while(head!=NULL){
			
         if(s.find(head->next)!=s.end()){
         //entering in this "if body" means that we have found the
		 //pointer the second time that will signal that the next 
		 //needs to be set to null to terminate the linked list
         head->next=NULL;
         return;
     } 
    
         s.insert(head->next);
         head=head->next;
     
     }
    
}
//N-th node from the last
int getNthFromLast(Node *head, int n)
{
       // Your code here
       int i=1;
       Node * ahead=head;
       Node*behind=head;
       while(i<n&&ahead!=NULL){
           ahead=ahead->next;
           i++;
       }
       if(ahead==NULL){
           return -1;
       }
       while(ahead!=NULL&&ahead->next!=NULL){
           ahead=ahead->next;
           behind=behind->next;
       }
        return behind->data;
    
}


// merge two sorted linked list 

Node* sortedMerge(Node* head1,   Node* head2)
{
    // Your Code Here
    
    
    Node * h=new Node(-1);
    Node * temp=h;
    while(head1&&head2){
        if(head1->data<head2->data){
        Node *t=head1;
        head1=head1->next;
        h->next=t;
        h=h->next;
    }
    else{
         Node *t=head2;
        head2=head2->next;
        h->next=t;
        h=h->next;
    }
    }
    if(head1==NULL&&head2){
        h->next=head2;
    }
    if(head2==NULL&&head1){
        h->next=head1;
    }
    return temp->next;
    
    
}
//linked list palindrome using simple get number and reverse technique
bool isPalindrome(Node *head)
{
    //Your code here
    int n,r;n=0,r=0;
    while(head){
        n=n*10+head->data;
        head=head->next;
        }
        int n0=n;
    while(n>0){
        r=r*10+n%10;
        n=n/10;
    }
    if(n0==r){
        return true;
    }
    return false;
}
//linked list to add two numbers ex 1->2->3->NULL means the no is 321.
//code for returning the number format
Node* addTwoLists(Node* first, Node* second) {
    // Code here
    int a,d,c;c=0,d=0,a=0;
    int i=0;
    bool b1,b2;
    while(first&&second){
        b1=first!=NULL;
        b2=second!=NULL;
        if(!b1&&b2)
            a=c+second->data;
        if(b1&&!b2)
            a=c+first->data;
        if(b1&&b2)
            a=c+first->data+second->data;
        c=a/10;
        a=a%10;
        d=d*10+a;
        if(b1)
        first=first->next;
        if(b2)
        second=second->next;
    }
    int r=0;
    while(n>0){
        r=r*10+n%10;
        n=n/10;
    }
}






//initial code for returning the linked list format(segerror)
Node* addTwoLists(Node* first, Node* second) {
    // Code here
    int a,d,c;c=0,d=0,a=0;
    
    bool b1,b2;
    Node *t;
    Node *head;
    while(first||second){
        b1=first!=NULL;
        b2=second!=NULL;
        if(!b1&&b2)
            a=c+second->data;
        if(b1&&!b2)
            a=c+first->data;
        if(b1&&b2)
            a=c+first->data+second->data;
        c=a/10;
        a=a%10;
        Node *n=new Node(a);
        if(t==NULL){
            t=n;
            head=n;
            
        }
        else{
        t->next=n;
        t=n;
        }
       // n->next=t;
        //t=n;
        //d=d*10+a;this could have been done when the output was in int
        if(b1)
        first=first->next;
        if(b2)
        second=second->next;
    }
    return head;
    }

//pair wise swap a lot similar to reverse a given length of linked list, just no loops required
Node* pairWiseSwap(struct Node* head)
{
   // The task is to complete this method
   if(head==NULL||head->next==NULL){
       return head;
   }
   Node *h=head;
   Node *n=head->next;
   Node *fh=head->next;
   head->next=pairWiseSwap(n->next);
   
   n->next=h;
   return n;
   
} 
//Arrange 0,1,2 in ascending order including the frequency
//using this code i got the time limit exceeded erroe
Node* segregate(Node *head) {
    
    // Add code here
    Node *temp;
    Node *h0,*h1,*h2;Node *d0,*d1;d0=NULL;d1=NULL;
    h0=NULL;h1=NULL;h2=NULL;Node *h;
    while(head){
        temp=head;
        head=head->next;
        if(temp->data==0){
            if(h0==NULL){
                h0=temp;
                d0=h0;
            }
            else{
                temp->next=h0;
                h0=temp;
            }
        }
        else if(temp->data==1){
            if(h1==NULL){
                h1=temp;
                d1=h1;
            }
            else{
                temp->next=h1;
                h1=temp;
            }
        }
        else{
            if(h2==NULL){
                h2=temp;
            }
            else{
                temp->next=h2;
                h2=temp;
            }
        }
    }
    h=h0;
    d0->next=h1;
    d1->next=h2;
    return h;
}
//delete a node without knowing the head node just the deleted node address and that it cant be the last node
void deleteNode(Node *node)
{
   // Your code here
   node->data=node->next->data;
   if(node->next)
   node->next=node->next->next;
   else
   node->next=NULL;
    
}

//mast wala code
SinglyLinkedListNode* combineList(SinglyLinkedListNode* head1, SinglyLinkedListNode* head2) {
    SinglyLinkedListNode *prev,cu,n;
    prev=NULL;
    cu=head2;
    n=NULL;
    while(cu){
        
        n=cu->next;
        cu->next=prev;
        prev=cu;
        cu=n;
}
    head2=prev;
    int c=0;
    SinglyLinkedListNode *h3=new  SinglyLinkedListNode(-1);
    SinglyLinkedListNode* head3=h3;
    
    while(head2||head1){
        if(c%2==0&&head1){
            head3->next=head1;
            head1=head1->next;
            head3=head3->next;
        }
        else if(head2){
            head3->next=head2;
            head2=head2->next;
            head3=head3->next;
        }
        c++;
    }
    return h3->next;
}
